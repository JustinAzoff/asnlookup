// Code generated by protoc-gen-go.
// source: asnlookup.protos
// DO NOT EDIT!

/*
Package asnlookup is a generated protocol buffer package.

It is generated from these files:
	asnlookup.protos

It has these top-level messages:
	Empty
	HelloReply
	LookupRequest
	LookupReply
	LookupRequestBatch
	LookupReplyBatch
*/
package asnlookup

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type HelloReply struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *HelloReply) Reset()                    { *m = HelloReply{} }
func (m *HelloReply) String() string            { return proto.CompactTextString(m) }
func (*HelloReply) ProtoMessage()               {}
func (*HelloReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *HelloReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type LookupRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
}

func (m *LookupRequest) Reset()                    { *m = LookupRequest{} }
func (m *LookupRequest) String() string            { return proto.CompactTextString(m) }
func (*LookupRequest) ProtoMessage()               {}
func (*LookupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *LookupRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type LookupReply struct {
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	As      int32  `protobuf:"varint,2,opt,name=as" json:"as,omitempty"`
	Prefix  string `protobuf:"bytes,3,opt,name=prefix" json:"prefix,omitempty"`
	Owner   string `protobuf:"bytes,4,opt,name=owner" json:"owner,omitempty"`
	Cc      string `protobuf:"bytes,5,opt,name=cc" json:"cc,omitempty"`
}

func (m *LookupReply) Reset()                    { *m = LookupReply{} }
func (m *LookupReply) String() string            { return proto.CompactTextString(m) }
func (*LookupReply) ProtoMessage()               {}
func (*LookupReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *LookupReply) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *LookupReply) GetAs() int32 {
	if m != nil {
		return m.As
	}
	return 0
}

func (m *LookupReply) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *LookupReply) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *LookupReply) GetCc() string {
	if m != nil {
		return m.Cc
	}
	return ""
}

type LookupRequestBatch struct {
	Requests []*LookupRequest `protobuf:"bytes,1,rep,name=requests" json:"requests,omitempty"`
}

func (m *LookupRequestBatch) Reset()                    { *m = LookupRequestBatch{} }
func (m *LookupRequestBatch) String() string            { return proto.CompactTextString(m) }
func (*LookupRequestBatch) ProtoMessage()               {}
func (*LookupRequestBatch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *LookupRequestBatch) GetRequests() []*LookupRequest {
	if m != nil {
		return m.Requests
	}
	return nil
}

type LookupReplyBatch struct {
	Replies []*LookupReply `protobuf:"bytes,1,rep,name=replies" json:"replies,omitempty"`
}

func (m *LookupReplyBatch) Reset()                    { *m = LookupReplyBatch{} }
func (m *LookupReplyBatch) String() string            { return proto.CompactTextString(m) }
func (*LookupReplyBatch) ProtoMessage()               {}
func (*LookupReplyBatch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *LookupReplyBatch) GetReplies() []*LookupReply {
	if m != nil {
		return m.Replies
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "asnlookup.Empty")
	proto.RegisterType((*HelloReply)(nil), "asnlookup.HelloReply")
	proto.RegisterType((*LookupRequest)(nil), "asnlookup.LookupRequest")
	proto.RegisterType((*LookupReply)(nil), "asnlookup.LookupReply")
	proto.RegisterType((*LookupRequestBatch)(nil), "asnlookup.LookupRequestBatch")
	proto.RegisterType((*LookupReplyBatch)(nil), "asnlookup.LookupReplyBatch")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Asnlookup service

type AsnlookupClient interface {
	Hello(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HelloReply, error)
	Lookup(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*LookupReply, error)
	LookupMany(ctx context.Context, opts ...grpc.CallOption) (Asnlookup_LookupManyClient, error)
	LookupManyBatch(ctx context.Context, opts ...grpc.CallOption) (Asnlookup_LookupManyBatchClient, error)
}

type asnlookupClient struct {
	cc *grpc.ClientConn
}

func NewAsnlookupClient(cc *grpc.ClientConn) AsnlookupClient {
	return &asnlookupClient{cc}
}

func (c *asnlookupClient) Hello(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := grpc.Invoke(ctx, "/asnlookup.Asnlookup/Hello", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asnlookupClient) Lookup(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*LookupReply, error) {
	out := new(LookupReply)
	err := grpc.Invoke(ctx, "/asnlookup.Asnlookup/Lookup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asnlookupClient) LookupMany(ctx context.Context, opts ...grpc.CallOption) (Asnlookup_LookupManyClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Asnlookup_serviceDesc.Streams[0], c.cc, "/asnlookup.Asnlookup/LookupMany", opts...)
	if err != nil {
		return nil, err
	}
	x := &asnlookupLookupManyClient{stream}
	return x, nil
}

type Asnlookup_LookupManyClient interface {
	Send(*LookupRequest) error
	Recv() (*LookupReply, error)
	grpc.ClientStream
}

type asnlookupLookupManyClient struct {
	grpc.ClientStream
}

func (x *asnlookupLookupManyClient) Send(m *LookupRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *asnlookupLookupManyClient) Recv() (*LookupReply, error) {
	m := new(LookupReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *asnlookupClient) LookupManyBatch(ctx context.Context, opts ...grpc.CallOption) (Asnlookup_LookupManyBatchClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Asnlookup_serviceDesc.Streams[1], c.cc, "/asnlookup.Asnlookup/LookupManyBatch", opts...)
	if err != nil {
		return nil, err
	}
	x := &asnlookupLookupManyBatchClient{stream}
	return x, nil
}

type Asnlookup_LookupManyBatchClient interface {
	Send(*LookupRequestBatch) error
	Recv() (*LookupReplyBatch, error)
	grpc.ClientStream
}

type asnlookupLookupManyBatchClient struct {
	grpc.ClientStream
}

func (x *asnlookupLookupManyBatchClient) Send(m *LookupRequestBatch) error {
	return x.ClientStream.SendMsg(m)
}

func (x *asnlookupLookupManyBatchClient) Recv() (*LookupReplyBatch, error) {
	m := new(LookupReplyBatch)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Asnlookup service

type AsnlookupServer interface {
	Hello(context.Context, *Empty) (*HelloReply, error)
	Lookup(context.Context, *LookupRequest) (*LookupReply, error)
	LookupMany(Asnlookup_LookupManyServer) error
	LookupManyBatch(Asnlookup_LookupManyBatchServer) error
}

func RegisterAsnlookupServer(s *grpc.Server, srv AsnlookupServer) {
	s.RegisterService(&_Asnlookup_serviceDesc, srv)
}

func _Asnlookup_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsnlookupServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/asnlookup.Asnlookup/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsnlookupServer).Hello(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asnlookup_Lookup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsnlookupServer).Lookup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/asnlookup.Asnlookup/Lookup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsnlookupServer).Lookup(ctx, req.(*LookupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asnlookup_LookupMany_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AsnlookupServer).LookupMany(&asnlookupLookupManyServer{stream})
}

type Asnlookup_LookupManyServer interface {
	Send(*LookupReply) error
	Recv() (*LookupRequest, error)
	grpc.ServerStream
}

type asnlookupLookupManyServer struct {
	grpc.ServerStream
}

func (x *asnlookupLookupManyServer) Send(m *LookupReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *asnlookupLookupManyServer) Recv() (*LookupRequest, error) {
	m := new(LookupRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Asnlookup_LookupManyBatch_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AsnlookupServer).LookupManyBatch(&asnlookupLookupManyBatchServer{stream})
}

type Asnlookup_LookupManyBatchServer interface {
	Send(*LookupReplyBatch) error
	Recv() (*LookupRequestBatch, error)
	grpc.ServerStream
}

type asnlookupLookupManyBatchServer struct {
	grpc.ServerStream
}

func (x *asnlookupLookupManyBatchServer) Send(m *LookupReplyBatch) error {
	return x.ServerStream.SendMsg(m)
}

func (x *asnlookupLookupManyBatchServer) Recv() (*LookupRequestBatch, error) {
	m := new(LookupRequestBatch)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Asnlookup_serviceDesc = grpc.ServiceDesc{
	ServiceName: "asnlookup.Asnlookup",
	HandlerType: (*AsnlookupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _Asnlookup_Hello_Handler,
		},
		{
			MethodName: "Lookup",
			Handler:    _Asnlookup_Lookup_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LookupMany",
			Handler:       _Asnlookup_LookupMany_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "LookupManyBatch",
			Handler:       _Asnlookup_LookupManyBatch_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "asnlookup.protos",
}

func init() { proto.RegisterFile("asnlookup.protos", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 320 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x92, 0xc1, 0x4e, 0x32, 0x31,
	0x14, 0x85, 0x99, 0xe1, 0x1f, 0xf8, 0xb9, 0x44, 0x25, 0x37, 0x4a, 0x1a, 0x8c, 0x09, 0xe9, 0xc2,
	0x8c, 0x1b, 0x42, 0xd0, 0xa5, 0x1b, 0x0d, 0x26, 0xc6, 0xe8, 0xa6, 0x3e, 0x41, 0x1d, 0xaa, 0x12,
	0x0b, 0xad, 0xed, 0x10, 0x9d, 0x37, 0xf1, 0x71, 0x0d, 0x2d, 0x85, 0x21, 0x99, 0xd9, 0xb8, 0x3c,
	0xa7, 0xe7, 0x7c, 0x73, 0xe7, 0xb6, 0xd0, 0xe3, 0x76, 0x29, 0x95, 0xfa, 0x58, 0xe9, 0x91, 0x36,
	0x2a, 0x57, 0x16, 0x3b, 0x5b, 0x87, 0xb6, 0x21, 0xb9, 0x5b, 0xe8, 0xbc, 0xa0, 0xe7, 0x00, 0xf7,
	0x42, 0x4a, 0xc5, 0x84, 0x96, 0x05, 0x12, 0x68, 0x2f, 0x84, 0xb5, 0xfc, 0x4d, 0x90, 0x68, 0x18,
	0xa5, 0x1d, 0x16, 0x24, 0xbd, 0x80, 0x83, 0x47, 0x57, 0x65, 0xe2, 0x73, 0x25, 0x6c, 0xbe, 0x8e,
	0xf2, 0xd9, 0xcc, 0x08, 0x6b, 0x43, 0x74, 0x23, 0xe9, 0x0a, 0xba, 0x21, 0xba, 0x61, 0x56, 0x07,
	0xf1, 0x10, 0x62, 0x6e, 0x49, 0x3c, 0x8c, 0xd2, 0x84, 0xc5, 0xdc, 0x62, 0x1f, 0x5a, 0xda, 0x88,
	0xd7, 0xf9, 0x37, 0x69, 0xba, 0xe0, 0x46, 0xe1, 0x31, 0x24, 0xea, 0x6b, 0x29, 0x0c, 0xf9, 0xe7,
	0x6c, 0x2f, 0xd6, 0xed, 0x2c, 0x23, 0x89, 0xb3, 0xe2, 0x2c, 0xa3, 0x0f, 0x80, 0x7b, 0x13, 0xde,
	0xf2, 0x3c, 0x7b, 0xc7, 0x2b, 0xf8, 0x6f, 0xbc, 0x5e, 0x7f, 0xbe, 0x99, 0x76, 0x27, 0x64, 0xb4,
	0x5b, 0xcc, 0x5e, 0x81, 0x6d, 0x93, 0x74, 0x0a, 0xbd, 0xd2, 0x2f, 0x78, 0xd2, 0x18, 0xda, 0x46,
	0x68, 0x39, 0x17, 0x01, 0xd4, 0xaf, 0x00, 0x69, 0x59, 0xb0, 0x10, 0x9b, 0xfc, 0xc4, 0xd0, 0xb9,
	0x09, 0x11, 0x9c, 0x40, 0xe2, 0x36, 0x8d, 0xbd, 0x52, 0xcf, 0x5d, 0xc2, 0xe0, 0xa4, 0xe4, 0xec,
	0x6e, 0x83, 0x36, 0xf0, 0x1a, 0x5a, 0x9e, 0x8c, 0xb5, 0x53, 0x0f, 0x6a, 0xc6, 0xa0, 0x0d, 0x9c,
	0x02, 0x78, 0xe3, 0x89, 0x2f, 0x8b, 0xbf, 0x10, 0xd2, 0x68, 0x1c, 0xe1, 0x33, 0x1c, 0xed, 0x28,
	0x7e, 0x15, 0x67, 0x75, 0x28, 0x77, 0x3c, 0x38, 0xad, 0xe6, 0xb9, 0x43, 0x0f, 0x7d, 0x69, 0xb9,
	0x27, 0x79, 0xf9, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xb8, 0x0e, 0x77, 0xfc, 0xa5, 0x02, 0x00, 0x00,
}
