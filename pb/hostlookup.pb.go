// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hostlookup.proto

package hostlookup

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3153478c85938a2, []int{0}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type HelloReply struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloReply) Reset()         { *m = HelloReply{} }
func (m *HelloReply) String() string { return proto.CompactTextString(m) }
func (*HelloReply) ProtoMessage()    {}
func (*HelloReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3153478c85938a2, []int{1}
}

func (m *HelloReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloReply.Unmarshal(m, b)
}
func (m *HelloReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloReply.Marshal(b, m, deterministic)
}
func (m *HelloReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloReply.Merge(m, src)
}
func (m *HelloReply) XXX_Size() int {
	return xxx_messageInfo_HelloReply.Size(m)
}
func (m *HelloReply) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloReply.DiscardUnknown(m)
}

var xxx_messageInfo_HelloReply proto.InternalMessageInfo

func (m *HelloReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type LookupRequest struct {
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LookupRequest) Reset()         { *m = LookupRequest{} }
func (m *LookupRequest) String() string { return proto.CompactTextString(m) }
func (*LookupRequest) ProtoMessage()    {}
func (*LookupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3153478c85938a2, []int{2}
}

func (m *LookupRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LookupRequest.Unmarshal(m, b)
}
func (m *LookupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LookupRequest.Marshal(b, m, deterministic)
}
func (m *LookupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupRequest.Merge(m, src)
}
func (m *LookupRequest) XXX_Size() int {
	return xxx_messageInfo_LookupRequest.Size(m)
}
func (m *LookupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LookupRequest proto.InternalMessageInfo

func (m *LookupRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type LookupReply struct {
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Host                 string   `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LookupReply) Reset()         { *m = LookupReply{} }
func (m *LookupReply) String() string { return proto.CompactTextString(m) }
func (*LookupReply) ProtoMessage()    {}
func (*LookupReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3153478c85938a2, []int{3}
}

func (m *LookupReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LookupReply.Unmarshal(m, b)
}
func (m *LookupReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LookupReply.Marshal(b, m, deterministic)
}
func (m *LookupReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupReply.Merge(m, src)
}
func (m *LookupReply) XXX_Size() int {
	return xxx_messageInfo_LookupReply.Size(m)
}
func (m *LookupReply) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupReply.DiscardUnknown(m)
}

var xxx_messageInfo_LookupReply proto.InternalMessageInfo

func (m *LookupReply) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *LookupReply) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

type LookupRequestBatch struct {
	Requests             []*LookupRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *LookupRequestBatch) Reset()         { *m = LookupRequestBatch{} }
func (m *LookupRequestBatch) String() string { return proto.CompactTextString(m) }
func (*LookupRequestBatch) ProtoMessage()    {}
func (*LookupRequestBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3153478c85938a2, []int{4}
}

func (m *LookupRequestBatch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LookupRequestBatch.Unmarshal(m, b)
}
func (m *LookupRequestBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LookupRequestBatch.Marshal(b, m, deterministic)
}
func (m *LookupRequestBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupRequestBatch.Merge(m, src)
}
func (m *LookupRequestBatch) XXX_Size() int {
	return xxx_messageInfo_LookupRequestBatch.Size(m)
}
func (m *LookupRequestBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupRequestBatch.DiscardUnknown(m)
}

var xxx_messageInfo_LookupRequestBatch proto.InternalMessageInfo

func (m *LookupRequestBatch) GetRequests() []*LookupRequest {
	if m != nil {
		return m.Requests
	}
	return nil
}

type LookupReplyBatch struct {
	Replies              []*LookupReply `protobuf:"bytes,1,rep,name=replies,proto3" json:"replies,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *LookupReplyBatch) Reset()         { *m = LookupReplyBatch{} }
func (m *LookupReplyBatch) String() string { return proto.CompactTextString(m) }
func (*LookupReplyBatch) ProtoMessage()    {}
func (*LookupReplyBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3153478c85938a2, []int{5}
}

func (m *LookupReplyBatch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LookupReplyBatch.Unmarshal(m, b)
}
func (m *LookupReplyBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LookupReplyBatch.Marshal(b, m, deterministic)
}
func (m *LookupReplyBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupReplyBatch.Merge(m, src)
}
func (m *LookupReplyBatch) XXX_Size() int {
	return xxx_messageInfo_LookupReplyBatch.Size(m)
}
func (m *LookupReplyBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupReplyBatch.DiscardUnknown(m)
}

var xxx_messageInfo_LookupReplyBatch proto.InternalMessageInfo

func (m *LookupReplyBatch) GetReplies() []*LookupReply {
	if m != nil {
		return m.Replies
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "hostlookup.Empty")
	proto.RegisterType((*HelloReply)(nil), "hostlookup.HelloReply")
	proto.RegisterType((*LookupRequest)(nil), "hostlookup.LookupRequest")
	proto.RegisterType((*LookupReply)(nil), "hostlookup.LookupReply")
	proto.RegisterType((*LookupRequestBatch)(nil), "hostlookup.LookupRequestBatch")
	proto.RegisterType((*LookupReplyBatch)(nil), "hostlookup.LookupReplyBatch")
}

func init() { proto.RegisterFile("hostlookup.proto", fileDescriptor_d3153478c85938a2) }

var fileDescriptor_d3153478c85938a2 = []byte{
	// 285 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0x41, 0x4b, 0xc3, 0x40,
	0x14, 0x84, 0x9b, 0x6a, 0x5b, 0x9d, 0x22, 0xd6, 0x77, 0xd0, 0x18, 0x44, 0x64, 0x0f, 0x12, 0x2f,
	0x45, 0xab, 0x9e, 0x04, 0x0f, 0x42, 0xa5, 0xa0, 0x5e, 0x16, 0xfc, 0x01, 0xd1, 0x2e, 0x56, 0xdc,
	0xba, 0x6b, 0x76, 0x7b, 0xc8, 0xcf, 0xf1, 0x9f, 0x4a, 0x76, 0xbb, 0x4d, 0x0a, 0xcd, 0xc5, 0x5b,
	0xde, 0xbc, 0x79, 0x5f, 0x26, 0x43, 0x30, 0x98, 0x29, 0x63, 0xa5, 0x52, 0x5f, 0x0b, 0x3d, 0xd4,
	0xb9, 0xb2, 0x8a, 0x50, 0x29, 0xac, 0x87, 0xce, 0x78, 0xae, 0x6d, 0xc1, 0xce, 0x81, 0x89, 0x90,
	0x52, 0x71, 0xa1, 0x65, 0x41, 0x31, 0x7a, 0x73, 0x61, 0x4c, 0xf6, 0x21, 0xe2, 0xe8, 0x2c, 0x4a,
	0x77, 0x79, 0x18, 0xd9, 0x05, 0xf6, 0x9e, 0xdd, 0x29, 0x17, 0x3f, 0x0b, 0x61, 0x6c, 0x69, 0xcd,
	0xa6, 0xd3, 0x5c, 0x18, 0x13, 0xac, 0xcb, 0x91, 0xdd, 0xa1, 0x1f, 0xac, 0x4b, 0xe6, 0x66, 0x23,
	0x11, 0xb6, 0xcb, 0x48, 0x71, 0xdb, 0xc9, 0xee, 0x99, 0x3d, 0x81, 0xd6, 0xde, 0xf3, 0x90, 0xd9,
	0xf7, 0x19, 0xdd, 0x62, 0x27, 0xf7, 0x73, 0x09, 0xd9, 0x4a, 0xfb, 0xa3, 0xe3, 0x61, 0xed, 0xfb,
	0xd6, 0x2e, 0xf8, 0xca, 0xca, 0xc6, 0x18, 0xd4, 0x92, 0x78, 0xd4, 0x15, 0x7a, 0xb9, 0xd0, 0xf2,
	0x53, 0x04, 0xd2, 0xd1, 0x26, 0x92, 0x96, 0x05, 0x0f, 0xbe, 0xd1, 0x6f, 0x1b, 0x98, 0xac, 0x3c,
	0x74, 0x83, 0x8e, 0xab, 0x8c, 0x0e, 0xea, 0x97, 0xae, 0xce, 0xe4, 0xb0, 0x2e, 0x55, 0xc5, 0xb2,
	0x16, 0xdd, 0xa3, 0xeb, 0xe1, 0xd4, 0x1c, 0x3d, 0x69, 0xca, 0xc2, 0x5a, 0xf4, 0x08, 0x78, 0xe1,
	0x25, 0xfb, 0x2e, 0xfe, 0xc7, 0x48, 0xa3, 0xcb, 0x88, 0x5e, 0xb1, 0x5f, 0x71, 0x7c, 0x25, 0xa7,
	0x8d, 0x30, 0xb7, 0x4f, 0x4e, 0x1a, 0x88, 0x6e, 0xeb, 0xb1, 0x6f, 0x5d, 0xf7, 0x8f, 0x5d, 0xff,
	0x05, 0x00, 0x00, 0xff, 0xff, 0x39, 0xd6, 0x53, 0x49, 0x77, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HostlookupClient is the client API for Hostlookup service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HostlookupClient interface {
	Hello(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HelloReply, error)
	Lookup(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*LookupReply, error)
	LookupMany(ctx context.Context, opts ...grpc.CallOption) (Hostlookup_LookupManyClient, error)
	LookupManyBatch(ctx context.Context, opts ...grpc.CallOption) (Hostlookup_LookupManyBatchClient, error)
}

type hostlookupClient struct {
	cc *grpc.ClientConn
}

func NewHostlookupClient(cc *grpc.ClientConn) HostlookupClient {
	return &hostlookupClient{cc}
}

func (c *hostlookupClient) Hello(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/hostlookup.Hostlookup/Hello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostlookupClient) Lookup(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*LookupReply, error) {
	out := new(LookupReply)
	err := c.cc.Invoke(ctx, "/hostlookup.Hostlookup/Lookup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostlookupClient) LookupMany(ctx context.Context, opts ...grpc.CallOption) (Hostlookup_LookupManyClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Hostlookup_serviceDesc.Streams[0], "/hostlookup.Hostlookup/LookupMany", opts...)
	if err != nil {
		return nil, err
	}
	x := &hostlookupLookupManyClient{stream}
	return x, nil
}

type Hostlookup_LookupManyClient interface {
	Send(*LookupRequest) error
	Recv() (*LookupReply, error)
	grpc.ClientStream
}

type hostlookupLookupManyClient struct {
	grpc.ClientStream
}

func (x *hostlookupLookupManyClient) Send(m *LookupRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *hostlookupLookupManyClient) Recv() (*LookupReply, error) {
	m := new(LookupReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hostlookupClient) LookupManyBatch(ctx context.Context, opts ...grpc.CallOption) (Hostlookup_LookupManyBatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Hostlookup_serviceDesc.Streams[1], "/hostlookup.Hostlookup/LookupManyBatch", opts...)
	if err != nil {
		return nil, err
	}
	x := &hostlookupLookupManyBatchClient{stream}
	return x, nil
}

type Hostlookup_LookupManyBatchClient interface {
	Send(*LookupRequestBatch) error
	Recv() (*LookupReplyBatch, error)
	grpc.ClientStream
}

type hostlookupLookupManyBatchClient struct {
	grpc.ClientStream
}

func (x *hostlookupLookupManyBatchClient) Send(m *LookupRequestBatch) error {
	return x.ClientStream.SendMsg(m)
}

func (x *hostlookupLookupManyBatchClient) Recv() (*LookupReplyBatch, error) {
	m := new(LookupReplyBatch)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HostlookupServer is the server API for Hostlookup service.
type HostlookupServer interface {
	Hello(context.Context, *Empty) (*HelloReply, error)
	Lookup(context.Context, *LookupRequest) (*LookupReply, error)
	LookupMany(Hostlookup_LookupManyServer) error
	LookupManyBatch(Hostlookup_LookupManyBatchServer) error
}

// UnimplementedHostlookupServer can be embedded to have forward compatible implementations.
type UnimplementedHostlookupServer struct {
}

func (*UnimplementedHostlookupServer) Hello(ctx context.Context, req *Empty) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (*UnimplementedHostlookupServer) Lookup(ctx context.Context, req *LookupRequest) (*LookupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lookup not implemented")
}
func (*UnimplementedHostlookupServer) LookupMany(srv Hostlookup_LookupManyServer) error {
	return status.Errorf(codes.Unimplemented, "method LookupMany not implemented")
}
func (*UnimplementedHostlookupServer) LookupManyBatch(srv Hostlookup_LookupManyBatchServer) error {
	return status.Errorf(codes.Unimplemented, "method LookupManyBatch not implemented")
}

func RegisterHostlookupServer(s *grpc.Server, srv HostlookupServer) {
	s.RegisterService(&_Hostlookup_serviceDesc, srv)
}

func _Hostlookup_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostlookupServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hostlookup.Hostlookup/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostlookupServer).Hello(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hostlookup_Lookup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostlookupServer).Lookup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hostlookup.Hostlookup/Lookup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostlookupServer).Lookup(ctx, req.(*LookupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hostlookup_LookupMany_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HostlookupServer).LookupMany(&hostlookupLookupManyServer{stream})
}

type Hostlookup_LookupManyServer interface {
	Send(*LookupReply) error
	Recv() (*LookupRequest, error)
	grpc.ServerStream
}

type hostlookupLookupManyServer struct {
	grpc.ServerStream
}

func (x *hostlookupLookupManyServer) Send(m *LookupReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *hostlookupLookupManyServer) Recv() (*LookupRequest, error) {
	m := new(LookupRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Hostlookup_LookupManyBatch_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HostlookupServer).LookupManyBatch(&hostlookupLookupManyBatchServer{stream})
}

type Hostlookup_LookupManyBatchServer interface {
	Send(*LookupReplyBatch) error
	Recv() (*LookupRequestBatch, error)
	grpc.ServerStream
}

type hostlookupLookupManyBatchServer struct {
	grpc.ServerStream
}

func (x *hostlookupLookupManyBatchServer) Send(m *LookupReplyBatch) error {
	return x.ServerStream.SendMsg(m)
}

func (x *hostlookupLookupManyBatchServer) Recv() (*LookupRequestBatch, error) {
	m := new(LookupRequestBatch)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Hostlookup_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hostlookup.Hostlookup",
	HandlerType: (*HostlookupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _Hostlookup_Hello_Handler,
		},
		{
			MethodName: "Lookup",
			Handler:    _Hostlookup_Lookup_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LookupMany",
			Handler:       _Hostlookup_LookupMany_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "LookupManyBatch",
			Handler:       _Hostlookup_LookupManyBatch_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "hostlookup.proto",
}
